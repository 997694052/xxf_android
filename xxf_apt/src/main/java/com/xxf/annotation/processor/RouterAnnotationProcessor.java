package com.xxf.annotation.processor;

import com.google.auto.service.AutoService;
import com.xxf.annotation.Router;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

/**
 * @author youxuan  E-mail:xuanyouwu@163.com
 * @Description router注解处理
 */
@AutoService(Processor.class)
public class RouterAnnotationProcessor extends AbstractProcessor {

    private Filer mFiler;
    private Messager mMessager;
    private Elements mElementUtils;

    private void log(Diagnostic.Kind kind, String log) {
        mMessager.printMessage(kind, log);
    }

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFiler = processingEnvironment.getFiler();
        mMessager = processingEnvironment.getMessager();
        mElementUtils = processingEnvironment.getElementUtils();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> annotations = new LinkedHashSet<>();
        annotations.add(Router.class.getCanonicalName());
        return annotations;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        System.out.println("==================>hello");
        Set<? extends Element> routerElements = roundEnvironment.getElementsAnnotatedWith(Router.class);
        List<String> innerClasses = new ArrayList<>();
        for (Element element : routerElements) {
            Router annotation = element.getAnnotation(Router.class);
            String path = annotation.path();
            String desc = annotation.desc();
            // String group = path.split("/")[1];
            //获取注解的类
            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
            String className = enclosingElement.getSimpleName().toString();
            innerClasses.add(gennerateInnerClass(className, path, desc));
        }
        String pkgName = Config.ANNOTATION_EXPORT_PKG_NAME;
        String className = Config.ANNOTATION_EXPORT_CLASS_NAME;
        String routerTab = generateClass(pkgName, className, innerClasses);
        String filePath = pkgName + "." + className;
        createJava(filePath, routerTab);
        log(Diagnostic.Kind.NOTE, "xxf生成java文件:" + filePath + "sucesss");
        return true;
    }

    private void createJava(String filePath, String content) {
        try {
            JavaFileObject jfo = mFiler.createSourceFile(filePath, new Element[]{});
            Writer writer = jfo.openWriter();
            writer.write(content);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private String generateClass(String pkgName, String className, List<String> innerClasses) {
        return new StringBuilder()
                .append("package " + pkgName + ";\n\n")
                .append("public final class " + className)
                .append("{\n")
                .append(String.join("\n", innerClasses))
                .append("\n}\n\n")
                .toString();
    }

    /**
     * 生成内部类
     *
     * @param className
     * @param path
     * @param desc
     * @return
     */
    private String gennerateInnerClass(String className, String path, String desc) {
        return new StringBuilder()
                .append("public static class " + className)
                .append("{\n")
                .append("/*\n*" + desc + "\n*\n*/")
                .append("public static String path=" + path + ";\n")
                .append("\n}\n\n")
                .toString();
    }

    private String brewCode(String pkName, String bindViewFiledClassType, String bindViewFiledName, int id) {
        StringBuilder builder = new StringBuilder();
        builder.append("package " + pkName + ";\n\n");
        builder.append("//Auto generated by apt,do not modify!!\n\n");
        builder.append("public class ViewBinding { \n\n");
        builder.append("public static void main(String[] args){ \n");
        String info = String.format("%s %s = %d", bindViewFiledClassType, bindViewFiledName, id);
        builder.append("System.out.println(\"" + info + "\");\n");
        builder.append("}\n");
        builder.append("}");
        return builder.toString();
    }


}
